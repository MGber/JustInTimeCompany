// <auto-generated />
using System;
using JustInTimeCompany.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JustInTimeCompany.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220807121716_modifiedseed")]
    partial class modifiedseed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JustInTimeCompany.Models.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac8aa908-1fa9-4abd-ad51-32353a4c4a00"),
                            Latitude = 50.63583079,
                            Longitude = 5.4393315759999998,
                            Name = "Liège"
                        },
                        new
                        {
                            Id = new Guid("76391ff6-412f-4c1e-b57f-4ccf86648cff"),
                            Latitude = 50.455998176000001,
                            Longitude = 4.4516648600000002,
                            Name = "Charleroi"
                        },
                        new
                        {
                            Id = new Guid("7172b844-ebcb-45c3-94bc-34c14dbd7b4f"),
                            Latitude = 50.898339999999997,
                            Longitude = 4.4823700000000004,
                            Name = "Bruxelles"
                        },
                        new
                        {
                            Id = new Guid("c2af481a-b71d-473c-8082-e1170b1551de"),
                            Latitude = 51.200400000000002,
                            Longitude = 2.8741699999999999,
                            Name = "Oostende"
                        });
                });

            modelBuilder.Entity("JustInTimeCompany.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "319a3971-483c-4ed9-a0cc-2bec19a07b06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c67635db-5fe0-4dc9-a541-83a29c75c08b",
                            Email = "M.Ney@jitc.com",
                            EmailConfirmed = true,
                            FirstName = "Mo",
                            Gender = 1,
                            LastName = "Ney",
                            LockoutEnabled = false,
                            NormalizedUserName = "MONEY",
                            PasswordHash = "AQAAAAEAACcQAAAAEMUR2gpDgnyOpH2iNDeVX2H/5/MBEagR805PGoLuLHu5Bt0TpDvprQa1IB0rZFpOuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8acc1ab1-5c5f-433c-91fe-72bceaf25962",
                            TwoFactorEnabled = false,
                            UserName = "money"
                        },
                        new
                        {
                            Id = "821f98b0-ff1e-458a-b15b-a9ea85750e45",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2d1d1e9-596f-4007-b0ae-a2e2afd2e921",
                            Email = "D.Balav@jitc.com",
                            EmailConfirmed = true,
                            FirstName = "Danièle",
                            Gender = 1,
                            LastName = "Balav",
                            LockoutEnabled = false,
                            NormalizedUserName = "DANBAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFB5EFJai/Fv9XNlW0jJYFapeLZ+7QoPEYLcuxw9wbGfP7hQ11gCc028VmfgmzpoWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8a128df-365b-4669-9f07-7b7fdd894132",
                            TwoFactorEnabled = false,
                            UserName = "danbal"
                        },
                        new
                        {
                            Id = "3ac33a35-d3d6-4a04-a79b-aded19a205db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a2fe6a2-c4aa-48f6-9189-444bb2163c98",
                            Email = "T.Sabine@jitc.com",
                            EmailConfirmed = true,
                            FirstName = "Thierry",
                            Gender = 0,
                            LastName = "Sabine",
                            LockoutEnabled = false,
                            NormalizedUserName = "THISAB",
                            PasswordHash = "AQAAAAEAACcQAAAAEH6uK1ofa6oOHE93YtEVagCNQNsTsvP88trmCS0rwKDshxpD/mz7jUHlnDDMnzeLgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d007a34e-d070-4a4d-a96c-e6cff53cc7ec",
                            TwoFactorEnabled = false,
                            UserName = "thisab"
                        },
                        new
                        {
                            Id = "efb6c53f-48d0-4981-a3c7-ef714fa2b508",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e47b2f78-59d6-4085-a587-0abf906c6205",
                            Email = "E.Coptère@jitc.com",
                            EmailConfirmed = true,
                            FirstName = "Eli",
                            Gender = 0,
                            LastName = "Coptère",
                            LockoutEnabled = false,
                            NormalizedUserName = "ELICOP",
                            PasswordHash = "AQAAAAEAACcQAAAAENp8wFk/2GlLW0YpqaT4dCnXweO07Z6Ih3Whm2doL5Fo3CEK3xUSiF0glZMKxsBLlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3645e5e-7ba9-47ae-937d-61f901f02e2d",
                            TwoFactorEnabled = false,
                            UserName = "elicop"
                        },
                        new
                        {
                            Id = "bb76dfd3-10d3-4224-b4b3-712aafa7ccaa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7a77c91-dedc-432c-8a54-c2f28010814d",
                            Email = "m.gaber@jitc.com",
                            EmailConfirmed = true,
                            FirstName = "Maxime",
                            Gender = 2,
                            LastName = "Gaber",
                            LockoutEnabled = false,
                            NormalizedUserName = "MAXGAB",
                            PasswordHash = "AQAAAAEAACcQAAAAEE6yUWIMK2hm6Sw651J/44DbjsgMufrpkvWAv59Bc86LEmhq2RxU/J14N4SHWz1Vpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cc88c4d-f17d-4202-a3e5-3ac2afd67560",
                            TwoFactorEnabled = false,
                            UserName = "maxgab"
                        },
                        new
                        {
                            Id = "51d08f0c-0c50-4e47-8e8b-55f7125019bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17c5742a-f6eb-4868-8ea9-913df64f11cc",
                            Email = "f.gaber@jitc.com",
                            EmailConfirmed = true,
                            FirstName = "Florence",
                            Gender = 1,
                            LastName = "Gaber",
                            LockoutEnabled = false,
                            NormalizedUserName = "FLOGAB",
                            PasswordHash = "AQAAAAEAACcQAAAAEIr9Ak4TUPmiENghfrySE47V7D3e0gR8NzrY+/nxMsueE946WXmBesj7jOzAwKodMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "541533c3-05a6-4129-bc17-087f652c6f3b",
                            TwoFactorEnabled = false,
                            UserName = "flogab"
                        },
                        new
                        {
                            Id = "4b40d3d6-bd20-43f2-a5b8-082009c13682",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31d42741-a33e-4167-a307-7a7002371e36",
                            Email = "c.gaber@jitc.com",
                            EmailConfirmed = true,
                            FirstName = "Christian",
                            Gender = 0,
                            LastName = "Gaber",
                            LockoutEnabled = false,
                            NormalizedUserName = "CHRGAB",
                            PasswordHash = "AQAAAAEAACcQAAAAELKJT/nSsskhtMATaRjSOjtKBZVD7MMc913LLVSAS0UN//mtxHY/xz7zuI+7br0srw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56a8beac-f8e5-4042-980a-0a0ea555c276",
                            TwoFactorEnabled = false,
                            UserName = "chrgab"
                        });
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DelayReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HelicopterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PilotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RealArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RealDeparture")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledDeparture")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WasLate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("HelicopterId");

                    b.HasIndex("PilotId");

                    b.HasIndex("ToId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6809c4c1-3714-4037-8d3d-cf06b3b6555c"),
                            DelayReason = "The pilot overslept.",
                            FromId = new Guid("ac8aa908-1fa9-4abd-ad51-32353a4c4a00"),
                            HelicopterId = new Guid("f7ad5264-3054-4889-9b9a-a1b598e579d7"),
                            PilotId = "821f98b0-ff1e-458a-b15b-a9ea85750e45",
                            RealArrival = new DateTime(2022, 8, 1, 20, 29, 0, 0, DateTimeKind.Unspecified),
                            RealDeparture = new DateTime(2022, 8, 1, 18, 29, 0, 0, DateTimeKind.Unspecified),
                            ScheduledArrival = new DateTime(2022, 8, 1, 20, 23, 0, 0, DateTimeKind.Unspecified),
                            ScheduledDeparture = new DateTime(2022, 8, 1, 18, 23, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("76391ff6-412f-4c1e-b57f-4ccf86648cff"),
                            WasLate = true
                        },
                        new
                        {
                            Id = new Guid("138d28a4-5cb2-4792-8aaa-2357310cfcc4"),
                            DelayReason = "The pilot again overslept.",
                            FromId = new Guid("76391ff6-412f-4c1e-b57f-4ccf86648cff"),
                            HelicopterId = new Guid("05e1ae09-0a16-4e76-8b2d-a70fcdd1c7e3"),
                            PilotId = "3ac33a35-d3d6-4a04-a79b-aded19a205db",
                            RealArrival = new DateTime(2022, 8, 2, 20, 29, 0, 0, DateTimeKind.Unspecified),
                            RealDeparture = new DateTime(2022, 8, 2, 18, 29, 0, 0, DateTimeKind.Unspecified),
                            ScheduledArrival = new DateTime(2022, 8, 2, 20, 23, 0, 0, DateTimeKind.Unspecified),
                            ScheduledDeparture = new DateTime(2022, 8, 2, 18, 23, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("7172b844-ebcb-45c3-94bc-34c14dbd7b4f"),
                            WasLate = true
                        },
                        new
                        {
                            Id = new Guid("97550023-4dd5-425b-8285-420b3bd52ad1"),
                            FromId = new Guid("7172b844-ebcb-45c3-94bc-34c14dbd7b4f"),
                            HelicopterId = new Guid("479e5015-b520-4307-bf25-b75c873f8975"),
                            PilotId = "efb6c53f-48d0-4981-a3c7-ef714fa2b508",
                            ScheduledArrival = new DateTime(2022, 9, 10, 20, 23, 0, 0, DateTimeKind.Unspecified),
                            ScheduledDeparture = new DateTime(2022, 9, 10, 18, 23, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("c2af481a-b71d-473c-8082-e1170b1551de"),
                            WasLate = false
                        },
                        new
                        {
                            Id = new Guid("44198f59-813b-4a96-a930-84f7b77a4eb6"),
                            FromId = new Guid("c2af481a-b71d-473c-8082-e1170b1551de"),
                            HelicopterId = new Guid("f7ad5264-3054-4889-9b9a-a1b598e579d7"),
                            PilotId = "821f98b0-ff1e-458a-b15b-a9ea85750e45",
                            ScheduledArrival = new DateTime(2022, 9, 11, 20, 23, 0, 0, DateTimeKind.Unspecified),
                            ScheduledDeparture = new DateTime(2022, 9, 11, 18, 23, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("ac8aa908-1fa9-4abd-ad51-32353a4c4a00"),
                            WasLate = false
                        },
                        new
                        {
                            Id = new Guid("c7bdc7a7-8a10-46e2-8058-3f9b645662c6"),
                            FromId = new Guid("ac8aa908-1fa9-4abd-ad51-32353a4c4a00"),
                            HelicopterId = new Guid("05e1ae09-0a16-4e76-8b2d-a70fcdd1c7e3"),
                            PilotId = "3ac33a35-d3d6-4a04-a79b-aded19a205db",
                            ScheduledArrival = new DateTime(2022, 9, 12, 20, 23, 0, 0, DateTimeKind.Unspecified),
                            ScheduledDeparture = new DateTime(2022, 9, 12, 18, 23, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("c2af481a-b71d-473c-8082-e1170b1551de"),
                            WasLate = false
                        });
                });

            modelBuilder.Entity("JustInTimeCompany.Models.FlightLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightLog");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Helicopter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlightCount")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatCount")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Helicopters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7ad5264-3054-4889-9b9a-a1b598e579d7"),
                            Engine = "Deux turbines du modèle de Rolls Royce 250-C20F",
                            FlightCount = 6,
                            Model = "Eurocopter AS 355 F1/F2 Ecureuil III",
                            SeatCount = 6,
                            Speed = 220,
                            Status = "DANGER"
                        },
                        new
                        {
                            Id = new Guid("05e1ae09-0a16-4e76-8b2d-a70fcdd1c7e3"),
                            Engine = "Une turbine du type Rolls Royce 250-C20B",
                            FlightCount = 5,
                            Model = "Bell 206 JetRanger",
                            SeatCount = 4,
                            Speed = 190,
                            Status = "WARNING"
                        },
                        new
                        {
                            Id = new Guid("479e5015-b520-4307-bf25-b75c873f8975"),
                            Engine = "Un piston du type Lycoming modèle IO-540",
                            FlightCount = 3,
                            Model = "Robinson R44 Raven II",
                            SeatCount = 3,
                            Speed = 190,
                            Status = "OK"
                        });
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeatAmount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79a77425-9216-40c3-b6c9-39d1dc097909"),
                            FlightId = new Guid("6809c4c1-3714-4037-8d3d-cf06b3b6555c"),
                            SeatAmount = 5,
                            UserId = "bb76dfd3-10d3-4224-b4b3-712aafa7ccaa"
                        },
                        new
                        {
                            Id = new Guid("bb207b88-d785-4e2b-820d-0c68f27739f5"),
                            FlightId = new Guid("138d28a4-5cb2-4792-8aaa-2357310cfcc4"),
                            SeatAmount = 3,
                            UserId = "51d08f0c-0c50-4e47-8e8b-55f7125019bc"
                        },
                        new
                        {
                            Id = new Guid("d58210ef-c2b6-4413-934c-2ae16eab260e"),
                            FlightId = new Guid("97550023-4dd5-425b-8285-420b3bd52ad1"),
                            SeatAmount = 3,
                            UserId = "4b40d3d6-bd20-43f2-a5b8-082009c13682"
                        },
                        new
                        {
                            Id = new Guid("6ae64930-1ba7-4933-96cf-d89fdd4353bd"),
                            FlightId = new Guid("44198f59-813b-4a96-a930-84f7b77a4eb6"),
                            SeatAmount = 3,
                            UserId = "bb76dfd3-10d3-4224-b4b3-712aafa7ccaa"
                        },
                        new
                        {
                            Id = new Guid("5b36ccee-3b31-49cb-ab02-3e021779dac4"),
                            FlightId = new Guid("44198f59-813b-4a96-a930-84f7b77a4eb6"),
                            SeatAmount = 1,
                            UserId = "51d08f0c-0c50-4e47-8e8b-55f7125019bc"
                        });
                });

            modelBuilder.Entity("JustInTimeCompany.Models.UserMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMessages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59b2ecaa-b258-4e87-9d0c-33d87c17cfd9"),
                            Message = "This is a testMessage",
                            UserId = "bb76dfd3-10d3-4224-b4b3-712aafa7ccaa"
                        },
                        new
                        {
                            Id = new Guid("2fba385c-5aac-4d98-8b2e-b3c3c23b6acc"),
                            Message = "This is a testMessage2",
                            UserId = "51d08f0c-0c50-4e47-8e8b-55f7125019bc"
                        },
                        new
                        {
                            Id = new Guid("2e27db70-be58-4c64-9c85-17320d79d1ce"),
                            Message = "This is a testMessage3",
                            UserId = "4b40d3d6-bd20-43f2-a5b8-082009c13682"
                        },
                        new
                        {
                            Id = new Guid("d64d8d14-2e2f-4044-995e-3c28a66b1d0e"),
                            Message = "This is a testMessage4",
                            UserId = "bb76dfd3-10d3-4224-b4b3-712aafa7ccaa"
                        },
                        new
                        {
                            Id = new Guid("46314476-0cbd-4535-b257-1ab51b582ec2"),
                            Message = "This is a testMessage5",
                            UserId = "51d08f0c-0c50-4e47-8e8b-55f7125019bc"
                        },
                        new
                        {
                            Id = new Guid("d4812a5f-54dc-4ab6-8e0a-7018744f2722"),
                            Message = "This is a testMessage6",
                            UserId = "4b40d3d6-bd20-43f2-a5b8-082009c13682"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4e50f06a-e14c-4657-ae21-5ba760cd3a51",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "4635ec8f-2c34-444e-9bb8-fb646e7bd1da",
                            Name = "Pilot",
                            NormalizedName = "PILOT"
                        },
                        new
                        {
                            Id = "570245bc-2723-4392-9213-68202d71dad4",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "319a3971-483c-4ed9-a0cc-2bec19a07b06",
                            RoleId = "4e50f06a-e14c-4657-ae21-5ba760cd3a51"
                        },
                        new
                        {
                            UserId = "821f98b0-ff1e-458a-b15b-a9ea85750e45",
                            RoleId = "4635ec8f-2c34-444e-9bb8-fb646e7bd1da"
                        },
                        new
                        {
                            UserId = "3ac33a35-d3d6-4a04-a79b-aded19a205db",
                            RoleId = "4635ec8f-2c34-444e-9bb8-fb646e7bd1da"
                        },
                        new
                        {
                            UserId = "efb6c53f-48d0-4981-a3c7-ef714fa2b508",
                            RoleId = "4635ec8f-2c34-444e-9bb8-fb646e7bd1da"
                        },
                        new
                        {
                            UserId = "bb76dfd3-10d3-4224-b4b3-712aafa7ccaa",
                            RoleId = "570245bc-2723-4392-9213-68202d71dad4"
                        },
                        new
                        {
                            UserId = "51d08f0c-0c50-4e47-8e8b-55f7125019bc",
                            RoleId = "570245bc-2723-4392-9213-68202d71dad4"
                        },
                        new
                        {
                            UserId = "4b40d3d6-bd20-43f2-a5b8-082009c13682",
                            RoleId = "570245bc-2723-4392-9213-68202d71dad4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Flight", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Airport", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Helicopter", "Helicopter")
                        .WithMany()
                        .HasForeignKey("HelicopterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.ApplicationUser", "Pilot")
                        .WithMany()
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.Airport", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("Helicopter");

                    b.Navigation("Pilot");

                    b.Navigation("To");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.FlightLog", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Reservation", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.Flight", null)
                        .WithMany("Reservations")
                        .HasForeignKey("FlightId");

                    b.HasOne("JustInTimeCompany.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JustInTimeCompany.Models.UserMessage", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustInTimeCompany.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JustInTimeCompany.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JustInTimeCompany.Models.Flight", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
